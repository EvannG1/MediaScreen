{% extends "Layout.twig" %}

{% block style %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<link rel="stylesheet" href="{{ base_url() }}/assets/css/gestion_ecran.css">
<style>
    .notification{
      position: fixed;
      bottom: 0;
      left:0;
      width: 100%;
    }

    .markdown-btn{
      display: flex;
      justify-content: left;
      flex-wrap: wrap;
    }

    .markdown-btn button{
      margin-right: 7px;
      margin-bottom: 7px;
      padding: 5px;
      font-size: 12px;
    }

    {% if screens is empty %}
        table {
            display: none;
        }
    {% endif %}
  </style>
{% endblock %}

{% block content %}
<div id="notification_block" class="notification" style="z-index: 999;display: none;">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="hideNotification()">
        <span aria-hidden="true">&times;</span>
    </button>
    <p></p>
</div>

<h1>Écrans de la séquence : {{ sequence.nom }}</h1>

<a href="{{ path_for('createScreen', {id: id}) }}" class="btn btn-primary">Créer un écran</a>

<table class="table table-sm table-hover">
    <thead>
        <tr>
            <th style="width: 25%;">Nom de l'écran</th>
            <th style="width: 15%;">Type d'écran</th>
            <th style="width: 15%;">Durée</th>
            <th style="width: 10%;">Auteur</th>
            <th style="width: 5%;"></th>
            <th style="width: 5%;"></th>
        </tr>
    </thead>

    {% if screens is empty %}
        Aucun écrans associée à la séquence {{ sequence.nom }} !
    {% else %}
        <tbody>
    {% for screen in screens %}
            <tr>
                <td class="panel_nomEcran">{{ screen.nom }}</td>
                <td class="panel_typeEcran">
                {% if screen.id_type == 1 %}
                    Markdown
                {% elseif screen.id_type == 2 %}
                    Vidéo
                {% endif %}
                </td>
                <td class="panel_duree">{{ screen.temps / 1000 }}s</td>
                <td class="panel_auteur">{{ screen.author.prenom }} {{ screen.author.nom }}</td>
                <td class="panel_update">
                    <button type="button" class="btn btn-default btn-sm" data-toggle="modal" data-target="#editEcran_{{ screen.id }}">
                        <i class="far fa-edit"></i>
                    </button>
                    <div class="modal fade exampleModalClass" id="editEcran_{{ screen.id }}" tabindex="-1" role="dialog"
                        aria-labelledby="editEcranLabel_{{ screen.id }}">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title" id="editEcranLabel_{{ screen.id }}">Modifier l'écran</h4>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Fermer"><span
                                            aria-hidden="true">×</span></button>
                                </div>
                                <div class="modal-body">
                                    <form>
                                        <div class="form-group">
                                            <label class="control-label">Nom de l'écran :</label>
                                            <input type="text" value="{{ screen.nom }}"
                                                class="form-control update_nomEcran">
                                        </div>
                                        {% if screen.id_type == 1 %}
                                        <div class="form-group">
                                            <label for="markdown_area">Veuillez saisir votre text markdown ci-dessous :</label>
                                            <div class="markdown-btn">
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-h1', event)">Titre niveau 1</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-h2', event)">Titre niveau 2</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-h3', event)">Titre niveau 3</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-talic', event)">Italic</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-bold', event)">Gras</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-souligner', event)">Souligner</button>
                                              <button type="button" class="btn btn-outline-dark" onclick="markdowner('make-hr', event)">Put HR</button>
                                            </div>
                                            <textarea class="form-control update_contenuEcran" id="markdown_area" name="markdown_area" rows="5">{{ screen.contenu }}</textarea>
                                        </div>
                                        <div class="form-group">
                                            <label class="control-label">Veuillez saisir le temps de l'écran (en seconde):</label>
                                            <input class="form-control update_ecran_time" value="{{ screen.temps / 1000 }}" type="number">
                                        </div>
                                        {% elseif screen.id_type == 2 %}
                                        <div class="form-group">
                                            <label for="content_area" class="control-label">ID de la vidéo YouTube</label>
                                            <input class="form-control update_contenuEcran" id="content_area" value="{{ screen.contenu }}" type="text">
                                        </div>
                                        {% endif %}
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
                                    {% if screen.id_type == 1 %}
                                    <button type="button" class="btn btn-dark" onclick="updateEcranMarkdown({{ screen.id }}, this)">Modifier l'écran</button>
                                    {% elseif screen.id_type == 2 %}
                                    <button type="button" class="btn btn-dark" onclick="updateEcranVideo({{ screen.id }}, this)">Modifier l'écran</button>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="panel_delete">
                    <input type="button" value="Supprimer" class="btn btn-danger delCompteBtn" data-toggle="modal"
                        data-target="#deleteEcran_{{ screen.id }}">
                    <div class="modal fade" id="deleteEcran_{{ screen.id }}" tabindex="-1" role="dialog"
                        aria-labelledby="deleteEcranLabel_{{ screen.id }}" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title" id="deleteEcranLabel_{{ screen.id }}">Supprimer un écran :</h4>
                                </div>
                                <div class="modal-body">
                                    <p>Êtes-vous sûr de vouloir supprimer la écran : {{ screen.nom }}?</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Annuler</button>
                                    <button type="button" class="btn btn-danger btn-ok"
                                        onclick="deleteEcran({{ screen.id }}, this)">Supprimer</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        {% endfor %}
    {% endif %}

    </tbody>
</table>
{% endblock %}

{% block script %}
<script src="{{ base_url() }}/assets/js/rangyinputs-jquery.js"></script>
<script>

function markdowner(modder, event){
  let textarea = $($(event.target).parents('.form-group').find('textarea')[0]);

  switch(modder){
    case 'make-h1':
      textarea.surroundSelectedText("#", "");
      break;
    case 'make-h2':
      textarea.surroundSelectedText("##", "");
      break;
    case 'make-h3':
      textarea.surroundSelectedText("###", "");
      break;
    case 'make-talic':
      textarea.surroundSelectedText("*", "*");
      break;
    case 'make-bold':
      textarea.surroundSelectedText("**", "**");
      break;
    case 'make-souligner':
      textarea.surroundSelectedText("__", "__");
      break;
    case 'make-hr':
      textarea.surroundSelectedText("----", "");
      break;

  }
}

function hideNotification(time = '500') {
    $('#notification_block').fadeOut(time, () => {
        $('#notification_block').removeClass();
    });
}

function showNotification(libelle_bootstrap, message) {
    hideNotification(100);//prend 100ms à se fermer
    setTimeout(function(){
      $('#notification_block p').text(message)
      $('#notification_block').addClass("notification")
      $('#notification_block').addClass('alert alert-' + libelle_bootstrap)
      $('#notification_block').fadeIn('500');
    }, 150);
}

function deleteEcran(id, leBtn) {
    let model = $(leBtn).parents().closest('.modal');
    let lineDelet = $(leBtn).parents().closest('tr');

    let http = new XMLHttpRequest();
    let params = 'id=' + id;
    http.open('POST', '{{ path_for('screenDelete') }}', true);

    http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    http.onreadystatechange = function () {
        if (http.readyState == 4 && http.status == 200) {
            //   console.log(http.responseText);
            if (http.responseText == 'success') {
                $(model).modal('hide');
                showNotification('success', "Succès : L'écran a bien été supprimé.");
                $(lineDelet).hide('slow', function () {
                    $(lineDelet).remove();
                });
            } else {
                showNotification('danger', 'Erreur : ', http.responseText);
            }
        }
    }
    http.send(params);
}

function updateEcranMarkdown(id, leBtn) {
    let bodyModal = $(leBtn).parent().prev('.modal-body');
    let nom = $(bodyModal).find('.update_nomEcran').val();
    let content = $(bodyModal).find('.update_contenuEcran').val();
    let ecranTime = $(bodyModal).find('.update_ecran_time').val();

    if (nom && ecranTime) {
        let model = $(leBtn).parents().closest('.modal');
        let lineUpdate = $(leBtn).parents().closest('tr');
        let http = new XMLHttpRequest();

        let params =
            'id=' + id +
            '&newNom=' + nom +
            '&newContent=' + content +
            '&newEcranTime=' + ecranTime;
        http.open('POST', '{{ path_for('screenUpdateMarkdown') }}', true);

        http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        http.onreadystatechange = function () {
            if (http.readyState == 4 && http.status == 200) {
                  console.log(http.responseText);
                if (http.responseText == 'success') {
                    $(lineUpdate).find('.panel_nomEcran').text(nom);
                    $(lineUpdate).find('.panel_duree').text(ecranTime + "s");
                    $(model).modal('hide');
                    showNotification('success', "Succès : L'écran : " + nom + " a bien été modifié.");
                } else {
                    showNotification('danger', 'Erreur : ', http.responseText);
                }
            }
        }
        http.send(params);
    } else {
        alert("Une erreur est survenue : des champs sont manquants, introuvable, ou incomplet \n\rSi le problème persiste actualisez la page ou contacter l'administrateur du site.");
    }
}

function updateEcranVideo(id, leBtn) {
    let bodyModal = $(leBtn).parent().prev('.modal-body');
    let nom = $(bodyModal).find('.update_nomEcran').val();
    let content = $(bodyModal).find('.update_contenuEcran').val();

    if (nom) {
        let model = $(leBtn).parents().closest('.modal');
        let lineUpdate = $(leBtn).parents().closest('tr');
        let http = new XMLHttpRequest();

        let params =
            'id=' + id +
            '&newNom=' + nom +
            '&newContent=' + content;
        http.open('POST', '{{ path_for('screenUpdateVideo') }}', true);

        http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        http.onreadystatechange = function () {
            if (http.readyState == 4 && http.status == 200) {
                  console.log(http.responseText);
                let reponse = http.responseText;
                if (reponse.startsWith('success')) {
                    if(reponse.search('time')){//enlever la condition vu que c'est une vidéo il devra toujours etre retourné un temps
                      let time;
                      time = reponse.split("=")[1];
                      time = time.replace("}", '');
                      $(lineUpdate).find('.panel_duree').text(time + "s");
                    }

                    $(lineUpdate).find('.panel_nomEcran').text(nom);
                    $(model).modal('hide');
                    showNotification('success', "Succès : L'écran : " + nom + " a bien été modifié.");
                } else {
                    showNotification('danger', 'Erreur : ', http.responseText);
                }
            }
        }
        http.send(params);
    } else {
        alert("Une erreur est survenue : des champs sont manquants, introuvable, ou incomplet \n\rSi le problème persiste actualisez la page ou contacter l'administrateur du site.");
    }
}
</script>
{% endblock %}
